{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"player",
				"playerPosY"
			],
			[
				"curren",
				"currentTile"
			],
			[
				"map",
				"mapSizeY"
			],
			[
				"curr",
				"currentMap"
			],
			[
				"play",
				"playerPosY"
			],
			[
				"modu",
				"modulePositions"
			],
			[
				"option",
				"chosingOption"
			],
			[
				"mod",
				"modulePositions"
			],
			[
				"quest",
				"questManagerNew"
			],
			[
				"inve",
				"inventory"
			],
			[
				"rand",
				"randint"
			],
			[
				"plas",
				"playerPosY"
			],
			[
				"current",
				"currentTile"
			],
			[
				"module",
				"moduleSizeX"
			],
			[
				"tilep",
				"tilePositionX"
			],
			[
				"mapsi",
				"mapSizeY"
			],
			[
				"actio",
				"actionDescriptions"
			],
			[
				"alter",
				"alter"
			],
			[
				"e",
				"e"
			],
			[
				"tilePo",
				"tilePosX"
			],
			[
				"modue",
				"moduleSizeY"
			],
			[
				"title",
				"titlePosX"
			],
			[
				"term",
				"termSizeX"
			],
			[
				"descr",
				"descriptionBoxX"
			],
			[
				"in",
				"inventory"
			],
			[
				"skill",
				"skillCounter"
			],
			[
				"skills",
				"skills"
			],
			[
				"per",
				"percentageBar"
			],
			[
				"perc",
				"percentGotUntilNextLevel"
			],
			[
				"next",
				"percentGotUntilNextLevel"
			],
			[
				"Skill",
				"skillManagerDisplay"
			],
			[
				"playe",
				"playerPosY"
			],
			[
				"desc",
				"descriptionBoxX"
			],
			[
				"ch",
				"chopDownTree"
			],
			[
				"cu",
				"currentMap"
			],
			[
				"inv",
				"inventoryPosY"
			],
			[
				"tile",
				"tileType"
			],
			[
				"mons",
				"monstersRange"
			],
			[
				"shop",
				"shopsRange"
			],
			[
				"towns",
				"townsRange"
			],
			[
				"tre",
				"treeRange"
			],
			[
				"sqa",
				"squaresY"
			],
			[
				"height",
				"height"
			],
			[
				"fas",
				"fastWave"
			],
			[
				"sc",
				"screenHeight"
			],
			[
				"scr",
				"screenWidth"
			],
			[
				"sho",
				"shootSpeed"
			],
			[
				"draw",
				"drawCreep"
			],
			[
				"end",
				"endPosY"
			],
			[
				"Cu",
				"currentPosX"
			],
			[
				"endP",
				"endPosX"
			],
			[
				"creep",
				"creep3"
			],
			[
				"cree",
				"creep1"
			],
			[
				"tow",
				"tower2"
			],
			[
				"edn",
				"endPosX"
			],
			[
				"st",
				"startPosX"
			],
			[
				"cur",
				"currentPosY"
			],
			[
				"sta",
				"startPosY"
			],
			[
				"start",
				"startPosX"
			],
			[
				"bull",
				"bullets"
			],
			[
				"endp",
				"endPosX"
			],
			[
				"centr",
				"centreX"
			],
			[
				"cent",
				"centreY"
			],
			[
				"mouse",
				"mousePos"
			],
			[
				"siz",
				"sizeY"
			],
			[
				"size",
				"sizeX"
			],
			[
				"posit",
				"positionY"
			],
			[
				"fire",
				"fireButton"
			],
			[
				"scree",
				"screenHeight"
			],
			[
				"ana",
				"analogWrite	Arduino analogWrite"
			],
			[
				"my",
				"myRoomAddress"
			],
			[
				"sent",
				"sentRoomAddress"
			],
			[
				"red",
				"redBrightness"
			],
			[
				"the",
				"theMessage"
			],
			[
				"point",
				"pointButtons"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 2910,
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "monsterManager.py",
			"settings":
			{
				"buffer_size": 76,
				"line_ending": "Windows",
				"name": "class Monster(level, gold):"
			}
		},
		{
			"file": "skillManager.py",
			"settings":
			{
				"buffer_size": 1548,
				"line_ending": "Windows",
				"name": "class Skill(name, colour)"
			}
		},
		{
			"contents": "import sys\nimport curses\nimport random\nfrom inventoryManager import *\nfrom shopManager import *\nfrom skillManager import *\nfrom mapManager import *\nfrom screenManager import *\nfrom questManager import *\n\ndef actionManagerKey(playerPosX, playerPosY, currentMap, inventory, skills, screen, actionDescriptions, mapSizeX, mapSizeY, activeQuests, modulePositions, textToDisplay, prayerPoints):\n    textToDisplay = []\n    key = screen.getch()\n    if key == ord('Q'):\n        sys.quit()\n    if key == curses.KEY_LEFT:\n        playerPosX = playerPosX - 1\n        currentMap = mapEvents(currentMap, playerPosX, playerPosY)\n    elif key == curses.KEY_RIGHT:\n        playerPosX = playerPosX + 1\n        currentMap = mapEvents(currentMap, playerPosX, playerPosY)\n    elif key == curses.KEY_UP:\n        playerPosY = playerPosY - 1\n        currentMap = mapEvents(currentMap, playerPosX, playerPosY)\n    elif key == curses.KEY_DOWN:\n        playerPosY = playerPosY + 1\n        currentMap = mapEvents(currentMap, playerPosX, playerPosY)\n\n    elif key == ord('1') or key == ord('2') or key == ord('3') or key == ord('4'):\n        modulePositions = moduleReposition(key, modulePositions, screen)\n\n    elif key == ord('w'):\n        currentMap = mapEvents(currentMap, playerPosX, playerPosY)\n\n\n\n    if currentMap[playerPosX][playerPosY] == \"grass\":\n        if itemPresentInInventory(\"seeds\", inventory):\n            if tileNextTo(currentMap, playerPosX, playerPosY, 'water', \"none\", 3):\n                textToDisplay.append((\"Press 'p' to plant seed\" , 16))\n                if key == ord('p'):\n                    currentMap[playerPosX][playerPosY] = \"seed\"\n                    skills = skillManagerExperience(skills, 'farming', 23)\n        if itemPresentInInventory(\"shovel\", inventory):\n            textToDisplay.append((\"Press 'd' to dig a hole\" , 16))\n            if key == ord('d'):\n                if random.randint(1, 5) == 1:\n                    inventory.append(\"bones\")\n                currentMap[playerPosX][playerPosY] = \"hole\"\n                inventory.append(\"dirt\")\n                skills = skillManagerExperience(skills, 'strength', 2)\n                skills = skillManagerExperience(skills, 'terraforming', 10)\n            if 'terraforming' in skills:\n                if skillManagerLevel(skills['terraforming']) > 4:\n                    textToDisplay.append((\"Press 'b' to dig a big hole\" , 16))\n                    if key == ord('b'):\n                        currentMap = changeTile(currentMap, playerPosX, playerPosY, \"hole\", 2)\n                        inventory.append(\"dirt\")\n                        skills = skillManagerExperience(skills, 'strength', 2)\n                        skills = skillManagerExperience(skills, 'terraforming', 40)\n        if itemPresentInInventory(\"logs\", inventory):\n            textToDisplay.append((\"Press 'f' to start a fire\" , 3))\n            if key == ord('f'):\n                currentMap[playerPosX][playerPosY] = \"fire\"\n                inventory = removeItemFromInventory(\"logs\", inventory, 1)\n                skills = skillManagerExperience(skills, 'firemaking', 10)\n        if itemPresentInInventory(\"bones\", inventory):\n            textToDisplay.append((\"Press 'b' to bury bones\", 3))\n            if key == ord('b'):\n                skills = skillManagerExperience(skills, 'praying', 8)\n                prayerPoints += 10\n\n    elif currentMap[playerPosX][playerPosY] == \"seed\":\n        textToDisplay.append((\"Press 't' to trample seed\", 3))\n        if key == ord('t'):\n            currentMap[playerPosX][playerPosY] = \"grass\"\n        if itemPresentInInventory(\"corrupt dust\", inventory):\n            textToDisplay.append((\"Press 'p' to add corrupt dust to tree\", 3))\n            if key == ord('p'):\n                currentMap[playerPosX][playerPosY] = \"evilSeed\"\n\n    elif currentMap[playerPosX][playerPosY] == \"tree\":\n        if itemPresentInInventory(\"axe\", inventory):\n            textToDisplay.append((\"Press 'c' to chop down tree\", 3))\n            if key == ord('c'):\n                if random.randint(1, 2) == 1:\n                    inventory.append(\"seeds\")\n                currentMap[playerPosX][playerPosY] = \"grass\"\n                inventory.append(\"logs\")\n                skills = skillManagerExperience(skills, 'woodcutting', 10)\n\n    elif currentMap[playerPosX][playerPosY] == \"town\":\n        textToDisplay.append((\"Press 't' to talk\", 16))\n        textToDisplay.append((\"Press 'q' to start a quest\", 15))\n        if key == ord('q'):\n            currentMap, activeQuests = questManagerNew(currentMap, activeQuests, playerPosX, playerPosY)\n            skillManagerExperience(skills, 'questing', -25)\n        for quest in activeQuests:\n            if quest[2] == \"return\" and quest[0] == str(playerPosX) + \",\" + str(playerPosY):\n                textToDisplay.append((\"Press 'c' to complete quest\", 15))\n                if key == ord('c'):\n                    for i in range(0,int(quest[4])):\n                        inventory.append(quest[3])\n                    activeQuests.remove(quest)\n                    skillManagerExperience(skills, 'questing', 50)\n\n    elif currentMap[playerPosX][playerPosY] == \"shop\":\n        textToDisplay.append((\"Press 's' to shop\", 3))\n        textToDisplay.append((\"Press 'r' to rob shop\", 3))\n        textToDisplay.append((\"Press 'i' to invest in shop\", 3))\n        if key == ord('s'):\n            shopManagerManager(inventory, screen)\n\n    elif currentMap[playerPosX][playerPosY] == \"monster\":\n        textToDisplay.append((\"Press 'a' to attack monster\", 3))\n        textToDisplay.append((\"Press 't' to train monster\", 3))\n        textToDisplay.append((\"Press 'f' to flee monster\", 3))\n        textToDisplay.append((\"Press 'd' to defend against monster\", 3))\n        textToDisplay.append((\"Press 'h' to hide from monster\", 3))\n        if key == ord('a'):\n            if random.randint(1, 15) == 1:\n                    inventory.append(\"corrupt dust\")\n            inventory.append(\"gold\")\n            currentMap[playerPosX][playerPosY] = \"grass\"\n            skills = skillManagerExperience(skills, 'attack', 10)\n\n    elif currentMap[playerPosX][playerPosY] == \"quest\":\n        for quest in activeQuests:\n            if quest[1] == str(playerPosX) + \",\" + str(playerPosY):\n                if key == ord('q'):\n                    updatedQuest = (quest[0],quest[1],\"return\",quest[3],quest[4])\n                    activeQuests.remove(quest)\n                    activeQuests.append(updatedQuest)\n                    currentMap[playerPosX][playerPosY] = \"grass\"\n\n    elif currentMap[playerPosX][playerPosY] == \"water\":\n        if itemPresentInInventory(\"fishingRod\", inventory):\n            textToDisplay.append((\"Press 'f' to fish water\", 15))\n            if key == ord('f'):\n                inventory.append(\"fish\")\n                inventory = removeItemFromInventory(\"fishingRod\", inventory, 1)\n                skills = skillManagerExperience(skills, 'fishing', 8)\n        elif itemPresentInInventory(\"bucket\", inventory):\n            textToDisplay.append((\"Press 'p' to pickup water\", 15))\n            if key == ord('p'):\n                inventory.append(\"water bucket\")\n                inventory = removeItemFromInventory(\"bucket\", inventory, 1)\n                currentMap[playerPosX][playerPosY] = \"hole\"\n\n    elif currentMap[playerPosX][playerPosY] == \"hole\":\n        if itemPresentInInventory(\"water bucket\", inventory):\n            textToDisplay.append((\"Press 'p' to put down water\", 15))\n            if key == ord('p'):\n                inventory.append(\"bucket\")\n                inventory = removeItemFromInventory(\"water bucket\", inventory, 1)\n                currentMap[playerPosX][playerPosY] = \"water\"\n\n    elif currentMap[playerPosX][playerPosY] == \"alter\":\n        if prayerPoints > 15:\n            textToDisplay.append((\"Press 'w' to pray to the god of staff\", 3))\n            textToDisplay.append((\"Press 's' to pray to the god of sword\", 5))\n            textToDisplay.append((\"Press 'x' to pray to the god of arrow\", 10))\n            if key == ord('w'):\n                prayerPoints -= 15\n                inventory.append(\"staff\")\n            elif key == ord('s'):\n                prayerPoints -= 15\n                inventory.append(\"sword\")\n            elif key == ord('x'):\n                prayerPoints -= 15\n                inventory.append(\"bow\")\n                for i in range(10):\n                    inventory.append(\"arrows\")\n\n\n    return playerPosX, playerPosY, currentMap, inventory, skills, activeQuests, modulePositions, textToDisplay, prayerPoints\n\ndef actionManagerDisplay(screen, moduleNumber, textToDisplay, currentMap, mapSizeX, mapSizeY, playerPosX, playerPosY):\n    if not moduleNumber == 5:\n        titlePosY, titlePosX = screenPositioner(moduleNumber, \"title\")\n        bodyPosY, bodyPosX = screenPositioner(moduleNumber, \"body\")\n        screen.addstr(titlePosY, titlePosX, 'ACTIONS', curses.color_pair(13))\n        description = currentMap[playerPosX][playerPosY]\n        screen.addstr(bodyPosY, bodyPosX, (\"(\" + str(mapSizeX) + \", \" + str(mapSizeY) + \")\"))\n        screen.addstr(bodyPosY + 1, bodyPosX, (\"(\" + str(playerPosX) + \", \" + str(playerPosY) + \")\"))\n        screen.addstr(bodyPosY + 2, bodyPosX, (description))\n        i = 0\n        for line in textToDisplay:\n            screen.addstr(bodyPosY + 3 + i, bodyPosX, line[0], curses.color_pair(line[1]))\n            i += 1",
			"file": "actionManager.py",
			"file_size": 9588,
			"file_write_time": 130607483910897513,
			"settings":
			{
				"buffer_size": 9397,
				"line_ending": "Windows",
				"name": "def actionManagerKey(key):"
			}
		},
		{
			"file": "testing.py",
			"settings":
			{
				"buffer_size": 247,
				"line_ending": "Windows"
			}
		},
		{
			"file": "shopManager.py",
			"settings":
			{
				"buffer_size": 6520,
				"line_ending": "Windows",
				"name": "shopManager, put stuff here"
			}
		},
		{
			"file": "questManager.py",
			"settings":
			{
				"buffer_size": 1264,
				"line_ending": "Windows"
			}
		},
		{
			"file": "screenManager.py",
			"settings":
			{
				"buffer_size": 3361,
				"line_ending": "Windows"
			}
		},
		{
			"file": "inventoryManager.py",
			"settings":
			{
				"buffer_size": 778,
				"line_ending": "Windows"
			}
		},
		{
			"file": "mapManager.py",
			"settings":
			{
				"buffer_size": 7878,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tileManager.py",
			"settings":
			{
				"buffer_size": 927,
				"line_ending": "Windows",
				"name": "class Town(posX, posY):"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 127.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instALL",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Lachlan/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/D/config.txt",
		"/C/Users/Lachlan/Documents/GitHub/rogueLike/testing.py",
		"/C/Users/Lachlan/Documents/GitHub/pygame-creeps/creeps.py",
		"/C/Users/Lachlan/Documents/GitHub/rogueLike/main.py",
		"/C/Users/Lachlan/Documents/GitHub/rogueLike/inventory.py",
		"/C/Program Files (x86)/Steam/steamapps/common/Age of Mythology/startup/user.con",
		"/C/Program Files (x86)/Steam/steamapps/common/Age of Mythology/startup/user.cfg",
		"/C/Users/Lachlan/Documents/boards.txt",
		"/C/Users/Lachlan/Desktop/DT/reciever1/reciever1.ino",
		"/C/Users/Lachlan/Desktop/DT/demoReciever/demoReciever.ino",
		"/C/Program Files (x86)/Steam/steamapps/common/Age of Mythology/mods/mod-status.txt",
		"/C/Python34/Lib/curses/__init__.py",
		"/C/Windows/System32/drivers/etc/hosts",
		"/C/Users/Lachlan/Desktop/DT/server.py",
		"/C/Users/Lachlan/Desktop/DT/sender/sender.ino",
		"/C/Users/Lachlan/AppData/Local/Temp/Rar$DIa0.469/Shilmista Readme.txt",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/path.py",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/creeps.py",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/towers.py",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/engine.py",
		"/C/Users/Lachlan/AppData/Local/Temp/Rar$DIa0.559/stitch_header.xml",
		"/C/Users/Lachlan/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Lachlan/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Lachlan/Desktop/DT/reciever2/reciever2.ino",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/test.py",
		"/C/Users/Lachlan/Desktop/DT/Folio/notes.txt",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/Creeps.py",
		"/C/Users/Lachlan/Documents/GitHub/pyDefense/airHockey.py",
		"/C/Users/Lachlan/Documents/Arduino/test/test.ino",
		"/C/Users/Lachlan/Desktop/DT/reciever/reciever.ino",
		"/C/Users/Lachlan/Desktop/DT/nrf.py",
		"/C/Users/Lachlan/Desktop/DT/test2RF.py",
		"/C/Users/Lachlan/Desktop/DT/testRF.py",
		"/C/Users/Lachlan/Desktop/DT/notes",
		"/C/Python27/Lib/socket.py",
		"/C/Python27/Lib/SocketServer.py",
		"/C/Python27/Lib/BaseHTTPServer.py",
		"/C/Users/Lachlan/Documents/GitHub/WorldSimulation/engine.py",
		"/C/Users/Lachlan/Desktop/DT/senderWorked/senderWorked.ino",
		"/C/Users/Lachlan/Desktop/DT/recieverText/recieverText.ino",
		"/C/Users/Lachlan/Desktop/DT/reciever/recieverBest.ino",
		"/C/Users/Lachlan/Documents/GitHub/WorldSimulation/bonusTrippyStandAlone.py",
		"/C/Users/Lachlan/AppData/Local/Temp/Rar$DIa0.314/webserver.py",
		"/C/Users/Lachlan/AppData/Local/Temp/Rar$DIa0.732/webserver.py",
		"/C/Program Files (x86)/Arduino/libraries/RF24master/RF24.h",
		"/C/Users/Lachlan/Desktop/risk/risk/latest.py",
		"/C/Users/Lachlan/Desktop/Year 12 Negotiate/RunMe.cmd",
		"/C/Program Files (x86)/Arduino/drivers/README.txt",
		"/C/Users/Lachlan/Desktop/projects/email.py",
		"/C/Users/Lachlan/Desktop/Year 12 Negotiate/setup.py",
		"/D/SDD LATEST/risk/risk/latest.py",
		"/C/Users/Lachlan/Desktop/office J4F29-N68CV-V9T4K-KVYPP-6JC9Q",
		"/C/Users/Lachlan/Desktop/hosts",
		"/C/Users/Lachlan/Desktop/Year 12 Negotiate/dist/latest.exe.log",
		"/D/SDD assignment/latest.py",
		"/C/Users/Lachlan/Desktop/Year 12 Negotiate/latest.py",
		"/C/Users/Lachlan/Desktop/Year 12 Negotiate/dist/eztext.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			",",
			"tilePosition",
			"descriptionBoxX",
			"screen",
			"scr",
			"",
			"lastPath",
			"draw",
			"path",
			"self",
			"if",
			"&quot;",
			"rand",
			"scree",
			"clock",
			"init",
			"print",
			" f ",
			"init",
			"theMess",
			"done",
			"pipe",
			"payl",
			"MISO",
			"miso",
			"-1",
			"font",
			"\"Arial\"",
			"None"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bodyPosX",
			"map",
			"screen",
			"\"",
			" self.webPage"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2910,
						"regions":
						{
						},
						"selection":
						[
							[
								684,
								684
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "monsterManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76,
						"regions":
						{
						},
						"selection":
						[
							[
								76,
								76
							]
						],
						"settings":
						{
							"auto_name": "class Monster(level, gold):",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "skillManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1548,
						"regions":
						{
						},
						"selection":
						[
							[
								1548,
								1548
							]
						],
						"settings":
						{
							"auto_name": "class Skill(name, colour)",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "actionManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9397,
						"regions":
						{
						},
						"selection":
						[
							[
								4279,
								4279
							]
						],
						"settings":
						{
							"auto_name": "def actionManagerKey(key):",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "testing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 247,
						"regions":
						{
						},
						"selection":
						[
							[
								160,
								160
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "shopManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6520,
						"regions":
						{
							"mark":
							{
								"flags": 144,
								"icon": "dot",
								"regions":
								[
									[
										1437,
										1366
									],
									[
										1541,
										1470
									],
									[
										1645,
										1574
									],
									[
										1749,
										1678
									],
									[
										1853,
										1782
									],
									[
										1957,
										1886
									]
								],
								"scope": "mark"
							}
						},
						"selection":
						[
							[
								5123,
								5123
							]
						],
						"settings":
						{
							"auto_name": "shopManager, put stuff here",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "questManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1264,
						"regions":
						{
						},
						"selection":
						[
							[
								747,
								771
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "screenManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3361,
						"regions":
						{
						},
						"selection":
						[
							[
								2374,
								2374
							],
							[
								2622,
								2622
							],
							[
								2874,
								2874
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 293.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 9,
					"file": "inventoryManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 778,
						"regions":
						{
						},
						"selection":
						[
							[
								696,
								696
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "mapManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7878,
						"regions":
						{
						},
						"selection":
						[
							[
								1567,
								1567
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "tileManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 927,
						"regions":
						{
						},
						"selection":
						[
							[
								927,
								927
							]
						],
						"settings":
						{
							"auto_name": "class Town(posX, posY):",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.265698330922,
			0.734741311428,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 113.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.reciever":
	{
		"height": 100.0
	},
	"output.reciever1":
	{
		"height": 100.0
	},
	"output.reciever2":
	{
		"height": 100.0
	},
	"output.sender":
	{
		"height": 100.0
	},
	"output.senderWorked":
	{
		"height": 100.0
	},
	"output.stino_log":
	{
		"height": 100.0
	},
	"project": "rogueLike.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
